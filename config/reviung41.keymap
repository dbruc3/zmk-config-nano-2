/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -------------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U   |  I  |  O  |  P  |   BKSP    |
// | ESC  |  A  |  S  |  D  |  F  |  G  |     |  H  |  J   |  K  |  L  |  ;  |    '      |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M   |  ,  |  .  |  /  | SHFT(RET) |
//                          | GUI | LWR | SPC | CTRL | RAISE |

                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp ESC &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &mt RSHFT RET
                        &kp LEFT_GUI  &mo 1 &kp SPACE &mt RCTRL RC(B)	&mo 2
                        >;
                };


                lower_layer {
// ----------------------------------------------------------------------------------
// | ~  |  !  |  @  |  #  |  $  |  %  |     |  ^  |  &  |  *  |  -  |  =  |  DEL |
// | `  |  1  |  2  |  3  |  4  |  5  |     |  6  |  7  |  8  |  9  |  0  |   |  |
// | (  |     |     |     |  {  |  [  |     |  ]  |  }  |  \  |  _  |  +  |   )  |
//                        |     |     | SPC | ADJ | ALT |

                        bindings = <
   &kp TILDE &kp EXCL  &kp AT      &kp HASH &kp DLLR &kp PRCNT      &kp CARET &kp AMPS &kp STAR    &kp MINUS  &kp EQUAL  &kp DEL
   &kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5       &kp N6  &kp N7 &kp N8    &kp N9 &kp N0 &kp PIPE
   &kp LPAR &none &none &none &kp LBRC &kp LBKT    &kp RBKT &kp RBRC &kp BSLH &kp UNDER &kp PLUS &kp RPAR
                                 &trans      &trans       &kp SPC        &mo 3       &kp RALT
                        >;
                };


                raise_layer {
// -----------------------------------------------------------------------------------------
// |POW |     |     |     |     |     |   |     |     |     |     |     |POWER|
// |BACK|     |     |     |     |     |   | LEFT| DOWN|  UP |RIGHT|     |     |
// |LOCK|     |     |     |     |     |   |     |     |     |     |     |     |
//                       |     | ALT |     |     |     |

                        bindings = <
   &kp K_POWER	&none	&none	&none	&none	&none			&none	&none	&none	&none	&none	&ext_power EP_TOG
   &kp K_BACK	&none	&none	&none	&none	&none			&kp LEFT	&kp DOWN	&kp UP	&kp RIGHT	&none	&none
   &kp K_LOCK	&none	&none	&none	&none	&none			&none	&none	&none	&none	&none	&none
													&none	&mo 3	&none	&none	&none
                        >;
                };


                adjust_layer {
// -----------------------------------------------------------------------------------------

// |    |    |    |    |  |BT_CLR|     |  BT1 | BT2 | BT3 | BT4 | BT5 |  MUTE  |
// |    | F1 | F2 | F3 | F4 | F5 |     |  F6  | F7  | F8  | F9  | F10 | VOL UP |
// |    | F11| F12|    |    |    |     | USB  |RESET|     |     |     | VOL DN |
//                     |    |    |     |      |     |
                        bindings = <
   &none	&none	&none	&none	&none	&bt BT_CLR			&bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&bt BT_SEL 3	&bt BT_SEL 4	&kp K_MUTE
   &none	&kp F1	&kp F2	&kp F3	&kp F4	&kp F5			&kp F6	&kp F7	&kp F8	&kp F9	&kp F10	&kp K_VOL_UP
   &none	&kp F11	&kp F12	&none	&none	&none			&out OUT_TOG	&reset	&none	&none	&none	&kp K_VOL_DN
													&none	&none	&none	&none	&none
                        >;
                };
        };
};
